<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stream on Visual Elixir Reference</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/</link><description>Recent content in Stream on Visual Elixir Reference</description><generator>Hugo</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-elixir-reference/Stream/index.xml" rel="self" type="application/rss+xml"/><item><title>chunk_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_by/2/</guid><description>Chunks stream by buffering elements for which fun returns the same value.
Elements are only emitted when fun returns a new value or the enumerable finishes.</description></item><item><title>chunk_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/2/</guid><description>Returns stream of lists containing count elements each.</description></item><item><title>chunk_every/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/4/</guid><description>Streams the enumerable in chunks, containing count elements each, where each new chunk starts step elements into the enumerable.
step is optional and, if not passed, defaults to count, i.e. chunks do not overlap.
If the last chunk does not have count elements to fill the chunk, elements are taken from leftover to fill in the chunk. If leftover does not have enough elements to fill the chunk, then a partial chunk is returned with less than count elements.</description></item><item><title>chunk_while/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_while/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_while/4/</guid><description>Brief description and usage of the Stream&amp;rsquo;s chunk_while/4 function.</description></item><item><title>cycle/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/cycle/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/cycle/1/</guid><description>Creates a stream that cycles through the given enumerable, infinitely.</description></item><item><title>dedup_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup_by/2/</guid><description>Creates a stream that only emits elements if the result of calling fun on the element is different from the (stored) result of calling fun on the last emitted element.</description></item><item><title>dedup/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup/1/</guid><description>Creates a stream that only emits elements if they are different from the last emitted element.
This function only ever needs to store the last emitted element.
Elements are compared using ===/2.</description></item><item><title>drop_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_every/2/</guid><description>Creates a stream that drops every nth element from the enumerable.
The first element is always dropped, unless nth is 0.
nth must be a non-negative integer.</description></item><item><title>drop_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_while/2/</guid><description>Lazily drops elements of the enumerable while the given function returns a truthy value.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/drop/2/</guid><description>Lazily drops the next count elements from the stream.
If a negative count is given, it will drop the last count elements from the stream.</description></item><item><title>each/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/each/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/each/2/</guid><description>Executes the given function for each element.</description></item><item><title>filter/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/filter/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/filter/2/</guid><description>Creates a stream that filters elements according to the given function on enumeration.</description></item><item><title>flat_map/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/flat_map/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/flat_map/2/</guid><description>Maps the given fun over enumerable and flattens the result.
This function returns a new stream built by appending the result of invoking fun on each element of enumerable together.</description></item><item><title>intersperse/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/intersperse/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/intersperse/2/</guid><description>Lazily intersperses elem between each element of the stream.</description></item><item><title>interval/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/interval/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/interval/1/</guid><description>Creates a stream that emits a value after the given period n in milliseconds.
The values emitted are an increasing counter starting at 0. This operation will block the caller by the given interval every time a new element is streamed.</description></item><item><title>iterate/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/iterate/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/iterate/2/</guid><description>Emits a sequence of values, starting with start. Successive values are generated by calling fun on the previous value.</description></item><item><title>map_every/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/map_every/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/map_every/3/</guid><description>Creates a stream that will apply the given function on every nth element from the enumerable.
The first element is always passed to the given function.
nth must be a non-negative integer.</description></item><item><title>map/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/map/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/map/2/</guid><description>Creates a stream that will apply the given function on enumeration.</description></item><item><title>reject/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/reject/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/reject/2/</guid><description>Creates a stream that will reject elements according to the given function on enumeration.</description></item><item><title>repeatedly/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/repeatedly/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/repeatedly/1/</guid><description>Returns a stream generated by calling fun repeatedly.</description></item><item><title>resource/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/resource/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/resource/3/</guid><description>Emits a sequence of values for a given resource.
The function begins by calling start_fun with no arguments.
The result of that call is passed to fun, which returns a tuple containing two elements: a list of data and an accumulator.
fun is then called repeatedly with the updated accumulator until it returns {:halt, acc}. The final accumulator is then passed to after_fun.
A typical use case involves opening a file with start_fun, streaming its contents in some way with successive calls to fun (one per line), and then closing the file with after_fun.</description></item><item><title>run/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/run/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/run/1/</guid><description>Materializes the given stream.
This is useful when a stream needs to be run, for side effects, and there is no interest in its return result.</description></item><item><title>scan/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/2/</guid><description>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the first element in the enumerable as the starting value.</description></item><item><title>scan/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/3/</guid><description>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the given acc as the starting value.</description></item><item><title>take_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/take_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/take_every/2/</guid><description>Creates a stream that takes every nth elements from the enumerable.
The first element is always included, unless nth is 0.
nth must be a non-negative integer.</description></item><item><title>take_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/take_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/take_while/2/</guid><description>Lazily takes elements of the enumerable while the given function returns a truthy value.</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/take/2/</guid><description>Lazily takes the next count elements from stream and stops enumeration.
If a negative count is given, the last count values will be taken.</description></item><item><title>timer/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/timer/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/timer/1/</guid><description>Creates a stream that emits a single value after n milliseconds.
The value emitted is 0. This operation will block the caller by the given time until the element is streamed.</description></item><item><title>transform/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/3/</guid><description>Transforms an existing stream.
It expects an accumulator and a function that receives each stream element and an accumulator. It must return a tuple, where the first element is a new stream (often a list) or the atom :halt, and the second element is the accumulator to be used by the next element, if any, in both cases.</description></item><item><title>transform/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/4/</guid><description>Transforms an existing stream with function-based start and finish.
The accumulator is only calculated when transformation starts. It also allows an after function to be given which is invoked when the stream halts or completes.</description></item><item><title>unfold/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/unfold/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/unfold/2/</guid><description>Emits a sequence of values for the given accumulator acc.
Successive values are generated by calling fun with the previous accumulator and it must return a tuple with the current value and next accumulator.
The enumeration finishes when fun returns nil.</description></item><item><title>uniq_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq_by/2/</guid><description>Creates a stream that only emits elements if they are unique, by removing the elements for which function fun returned duplicate elements.
The function fun maps every element to a term which is used to determine if two elements are duplicates.
Keep in mind that, in order to know if an element is unique or not, this function needs to store all unique values emitted by the stream. Therefore, if the stream is infinite, the number of elements stored will grow infinitely, never being garbage-collected.</description></item><item><title>uniq/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq/1/</guid><description>Creates a stream that only emits elements if they are unique.
Keep in mind that, in order to know if an element is unique or not, this function needs to store all unique values emitted by the stream. Therefore, if the stream is infinite, the number of elements stored will grow infinitely, never being garbage-collected.</description></item><item><title>with_index/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/with_index/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/with_index/2/</guid><description>Creates a stream where each element in the enumerable will be wrapped in a tuple alongside its index.
If offset is given, we will index from the given offset instead of from zero.</description></item><item><title>zip/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/1/</guid><description>Zips corresponding elements from a finite collection of enumerables into one stream of tuples.
The zipping finishes as soon as any enumerable in the given collection completes.</description></item><item><title>zip/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/2/</guid><description>Zips two collections together, lazily.
The zipping finishes as soon as any enumerable completes.</description></item></channel></rss>