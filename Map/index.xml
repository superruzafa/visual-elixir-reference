<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Map on Visual Elixir Reference</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/</link><description>Recent content in Map on Visual Elixir Reference</description><generator>Hugo</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-elixir-reference/Map/index.xml" rel="self" type="application/rss+xml"/><item><title>delete/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/delete/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/delete/2/</guid><description>Deletes the entry in map for a specific key.
If the key does not exist, returns map unchanged.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/drop/2/</guid><description>Drops the given keys from map.
If keys contains keys that are not in map, they&amp;rsquo;re simply ignored.</description></item><item><title>fetch!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/fetch_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/fetch_/2/</guid><description>Fetches the value for a specific key in the given map.
If map doesn&amp;rsquo;t contain key, a KeyError exception is raised.</description></item><item><title>fetch/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/fetch/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/fetch/2/</guid><description>Fetches the value for a specific key in the given map by returning {:ok, value}.
If map doesn&amp;rsquo;t contain key, :error is returned.</description></item><item><title>get_and_update!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update_/3/</guid><description>Gets the value from key and updates it, all in one pass.
fun is called with the current value under key in map and must return a two-element tuple: the &amp;ldquo;get&amp;rdquo; value (the retrieved value, which can be operated on before being returned) and the new value to be stored under key in the resulting new map.
The returned value is a tuple with the &amp;ldquo;get&amp;rdquo; value returned by fun and a new map with the updated value under key.</description></item><item><title>get_and_update/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update/3/</guid><description>Gets the value from key and updates it, all in one pass.
fun is called with the current value under key in map and must return a two-element tuple: the &amp;ldquo;get&amp;rdquo; value (the retrieved value, which can be operated on before being returned) and the new value to be stored under key in the resulting new map.
The returned value is a tuple with the &amp;ldquo;get&amp;rdquo; value returned by fun and a new map with the updated value under key.</description></item><item><title>get_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get_lazy/3/</guid><description>Gets the value for a specific key in map.
If key is present in map with value value, then value is returned.
Otherwise, fun is evaluated and its result is returned. This is useful if the default value is very expensive to calculate or generally difficult to setup and teardown again.</description></item><item><title>get/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get/3/</guid><description>Gets the value for a specific key in map.
Otherwise, default is returned.</description></item><item><title>has_key?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/has_key?/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/has_key?/2/</guid><description>Returns true if the given key exists in the given map.
Otherwise, returns false.</description></item><item><title>keys/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/keys/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/keys/1/</guid><description>Returns all keys from map.</description></item><item><title>merge/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/merge/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/merge/2/</guid><description>Merges two maps into one.
All keys in map2 will be added to map1, overriding any existing one (i.e., the keys in map2 &amp;ldquo;have precedence&amp;rdquo; over the ones in map1).</description></item><item><title>merge/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/merge/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/merge/3/</guid><description>Merges two maps into one, resolving conflicts through the given fun.
All keys in map2 will be added to map1. The given function will be invoked when there are duplicate keys; its arguments are key (the duplicate key), value1 (the value of key in map1), and value2 (the value of key in map2).
The value returned by fun is used as the value under key in the resulting map.</description></item><item><title>new/0</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/new/0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/new/0/</guid><description>Returns a new empty map.</description></item><item><title>new/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/new/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/new/1/</guid><description>Creates a map from an enumerable.
Duplicated keys are removed; the latest one prevails.</description></item><item><title>new/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/new/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/new/2/</guid><description>Creates a map from an enumerable via the given transformation function fun.
Duplicated keys are removed; the latest one prevails.</description></item><item><title>pop_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/pop_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/pop_lazy/3/</guid><description>Lazily returns and removes the value associated with key in map.
If key is present in map with value value, {value, new_map} is returned where new_map is the result of removing key from map.
If key is not present in map, {b, map} is returned, where b is the result of applying fun.</description></item><item><title>pop!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/pop_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/pop_/2/</guid><description>Returns and removes the value associated with key in map.
Raises KeyError if key is not present.</description></item><item><title>pop/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/pop/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/pop/3/</guid><description>Returns and removes the value associated with key in map.
If key is present in map with value value, {value, new_map} is returned where new_map is the result of removing key from map.
If key is not present in map, {default, map} is returned.</description></item><item><title>put_new_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/put_new_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/put_new_lazy/3/</guid><description>Evaluates fun and puts the result under key in map unless key is already present.
This function is useful in case you want to compute the value to put under key only if key is not already present, as for example, when the value is expensive to calculate or generally difficult to setup and teardown again.
If map doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using the value returned from fun.</description></item><item><title>put_new/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/put_new/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/put_new/3/</guid><description>Puts the given value under key unless the entry key already exists.
If map doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using value as value.</description></item><item><title>put/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/put/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/put/3/</guid><description>Puts the given value under key in map.
If map doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using value as value.</description></item><item><title>replace!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/replace_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/replace_/3/</guid><description>Alters the value stored under key to value, but only if the entry key already exists in map.
If key is not present in map, a KeyError exception is raised.</description></item><item><title>split/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/split/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/split/2/</guid><description>Takes all entries corresponding to the given keys in map and extracts them into a separate map.
Returns a tuple with the new map and the old map with removed keys.
Keys for which there are no entries in map are ignored.</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/take/2/</guid><description>Returns a new map with all the key-value pairs in map where the key is in keys.
If keys contains keys that are not in map, they&amp;rsquo;re simply ignored.</description></item><item><title>to_list/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/to_list/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/to_list/1/</guid><description>Converts map to a list.
Each key-value pair in the map is converted to a two-element tuple {key, value} in the resulting list.</description></item><item><title>update!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/update_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/update_/3/</guid><description>Updates the key in map with the given function fun.
If key is present in map with value value, fun is invoked with argument value and its result is used as the new value of key.
If key is not present in map, a KeyError exception is raised.</description></item><item><title>update/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/update/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/update/4/</guid><description>Updates the key in map with the given function fun.
If key is present in map with value value, fun is invoked with argument value and its result is used as the new value of key.
If key is not present in map, value is inserted as the value of key. The initial value will not be passed through the update function.</description></item><item><title>values/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/values/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/values/1/</guid><description>Returns all values from map.</description></item></channel></rss>