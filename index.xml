<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Elixir Reference</title><link>https://superruzafa.github.io/visual-elixir-reference/</link><description>Recent content on Visual Elixir Reference</description><generator>Hugo</generator><language>en</language><atom:link href="https://superruzafa.github.io/visual-elixir-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>all?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/all_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/all_/2/</guid><description>Returns true if all the elements in enumerable evaluate to a truthy value when the function fun is applied over them.
As soon as one element evaluates to a falsy value, the iteration stops and the whole function returns false.
On empty enumerables this function returns true.</description></item><item><title>any?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/any_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/any_/2/</guid><description>Returns true if at least one element in enumerable evaluates to a truthy value when the function fun is applied over it.
If no element in enumerable evaluates to a truthy value then the function returns false.
On empty enumerables this function returns false.</description></item><item><title>append/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Tuple/append/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Tuple/append/2/</guid><description>Inserts an element at the end of a tuple.
Returns a new tuple with the element appended at the end, and contains the elements in tuple followed by value as the last element.</description></item><item><title>at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/at/3/</guid><description>Finds the element in enumerable at the index index (zero-based).
A negative index can be passed, which means the index is counted from the end.
The function evaluates to default if the index is out of bounds.</description></item><item><title>chunk_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_by/2/</guid><description>Splits enumerable on every element for which fun returns a new value.</description></item><item><title>chunk_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_by/2/</guid><description>Chunks stream by buffering elements for which fun returns the same value.
Elements are only emitted when fun returns a new value or the enumerable finishes.</description></item><item><title>chunk_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_every/2/</guid><description>Returns a list of lists containing count elements each.
The last chunk may content count or less elements.</description></item><item><title>chunk_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/2/</guid><description>Returns stream of lists containing count elements each.</description></item><item><title>chunk_every/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_every/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_every/4/</guid><description>Returns list of lists containing count elements each, where each new chunk starts step elements into enumerable.
step is optional and, if not passed, defaults to count, i.e. chunks do not overlap.
If the last chunk does not have count elements to fill the chunk, elements are taken from leftover to fill in the chunk. If leftover does not have enough elements to fill the chunk, then a partial chunk is returned with less than count elements.</description></item><item><title>chunk_every/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_every/4/</guid><description>Streams the enumerable in chunks, containing count elements each, where each new chunk starts step elements into the enumerable.
step is optional and, if not passed, defaults to count, i.e. chunks do not overlap.
If the last chunk does not have count elements to fill the chunk, elements are taken from leftover to fill in the chunk. If leftover does not have enough elements to fill the chunk, then a partial chunk is returned with less than count elements.</description></item><item><title>chunk_while/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_while/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/chunk_while/4/</guid><description>Chunks enumerable with fine grained control when every chunk is emitted.
chunk_fun receives the current element and the accumulator and must return
{:cont, chunk, acc} to emit the given chunk and continue with accumulator or {:cont, acc} to not emit any chunk and continue with the return accumulator. after_fun is invoked when iteration is done and must also return {:cont, chunk, acc} or {:cont, acc}.
The iteration stops as soon as chunk_fun returns a tuple of the form {:halt, acc}.</description></item><item><title>chunk_while/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_while/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/chunk_while/4/</guid><description>Brief description and usage of the Stream&amp;rsquo;s chunk_while/4 function.</description></item><item><title>concat/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/concat/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/concat/1/</guid><description>Given an enumerable of enumerables, concatenates enumerables into a single list.</description></item><item><title>concat/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/concat/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/concat/2/</guid><description>Concatenates the enumerable on the left with the enumerable on the right.</description></item><item><title>count/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/count/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/count/1/</guid><description>Returns the size of the enumerable.</description></item><item><title>count/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/count/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/count/2/</guid><description>Returns the count of elements in enumerable for which fun returns a truthy value.</description></item><item><title>cycle/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/cycle/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/cycle/1/</guid><description>Creates a stream that cycles through the given enumerable, infinitely.</description></item><item><title>dedup_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/dedup_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/dedup_by/2/</guid><description>Discards all those adjacent elements in enumerable which are duplicated in terms of the output of the fun function, collapsing them in a single element.</description></item><item><title>dedup_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup_by/2/</guid><description>Creates a stream that only emits elements if the result of calling fun on the element is different from the (stored) result of calling fun on the last emitted element.</description></item><item><title>dedup/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/dedup/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/dedup/1/</guid><description>Discards all those adjacent duplicated elements in the enumerable, collapsing them in a single element.</description></item><item><title>dedup/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/dedup/1/</guid><description>Creates a stream that only emits elements if they are different from the last emitted element.
This function only ever needs to store the last emitted element.
Elements are compared using ===/2.</description></item><item><title>delete_at/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/delete_at/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/delete_at/2/</guid><description>Produces a new list by removing the value at the specified index. If index is out of bounds, the original list is returned.
Negative indices indicate an offset from the end of the list.</description></item><item><title>delete_at/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Tuple/delete_at/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Tuple/delete_at/2/</guid><description>Deletes the element at the given index from tuple.
Raises ArgumentError if index is negative or greater than or equal to the length of tuple. index is zero-based.</description></item><item><title>delete_first/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete_first/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete_first/2/</guid><description>Deletes the first entry in the keyword list for a specific key.
If the key does not exist, returns the keyword list unchanged.</description></item><item><title>delete/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/delete/2/</guid><description>Deletes the entries in the keyword list for a specific key.
If the key does not exist, returns the keyword list unchanged.</description></item><item><title>delete/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/delete/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/delete/2/</guid><description>Deletes the given element from the list. Returns a new list without the element. If the element occurs more than once in the list, just the first occurrence is removed.</description></item><item><title>delete/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/delete/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/delete/2/</guid><description>Deletes the entry in map for a specific key.
If the key does not exist, returns map unchanged.</description></item><item><title>digits/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Integer/digits/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Integer/digits/2/</guid><description>Converts an Integer to a charlist.</description></item><item><title>disjoint?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Range/disjoint_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Range/disjoint_/2/</guid><description>Range.disjoint?/2 Returns true if range1 does not overlap range2.
It returns false otherwise.</description></item><item><title>drop_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/drop_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/drop_every/2/</guid><description>Returns a list where every nth element in enumerable has been dropped, starting with the first element.
The first element is always dropped, unless nth is 0.
The second argument specifying every nth element must be a non-negative integer.</description></item><item><title>drop_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_every/2/</guid><description>Creates a stream that drops every nth element from the enumerable.
The first element is always dropped, unless nth is 0.
nth must be a non-negative integer.</description></item><item><title>drop_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/drop_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/drop_while/2/</guid><description>Drops elements at the beginning of the enumerable while fun returns a truthy value.</description></item><item><title>drop_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/drop_while/2/</guid><description>Lazily drops elements of the enumerable while the given function returns a truthy value.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/drop/2/</guid><description>Drops count elements from the enumerable.
If a negative count is given, the count last values will be dropped.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/drop/2/</guid><description>Drops the entries in the keyword list for a specific key.
If the key does not exist, returns the keyword list unchanged.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/drop/2/</guid><description>Drops the given keys from map.
If keys contains keys that are not in map, they&amp;rsquo;re simply ignored.</description></item><item><title>drop/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/drop/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/drop/2/</guid><description>Lazily drops the next count elements from the stream.
If a negative count is given, it will drop the last count elements from the stream.</description></item><item><title>duplicate/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/duplicate/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/duplicate/2/</guid><description>Duplicates the given element count times in a list. If count is 0, an empty list is returned.</description></item><item><title>duplicate/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Tuple/duplicate/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Tuple/duplicate/2/</guid><description>Creates a new tuple of size elements each of them being equal to value.</description></item><item><title>each/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/each/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/each/2/</guid><description>Invokes the given fun for each element in the enumerable and returns :ok.</description></item><item><title>each/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/each/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/each/2/</guid><description>Executes the given function for each element.</description></item><item><title>elem/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Kernel/elem/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Kernel/elem/2/</guid><description>Gets the element at the zero-based index in tuple. Allowed in guard tests.
It raises ArgumentError when index is negative or it is out of range of the tuple elements.</description></item><item><title>empty?/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/empty/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/empty/1/</guid><description>Returns true if the enumerable is empty.
Otherwise it returns false.</description></item><item><title>fetch!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/fetch_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/fetch_/2/</guid><description>Finds the element at the given index (zero-based) and returns it if found.
A negative index can be passed, which means the index is counted from the end.
Raises OutOfBoundsError if the given index is outside the range of the enumerable.</description></item><item><title>fetch!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch_/2/</guid><description>Fetches the value for a specific key and returns it in a tuple.
If key does not exist, a KeyError is raised.</description></item><item><title>fetch!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/fetch_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/fetch_/2/</guid><description>Fetches the value for a specific key in the given map.
If map doesn&amp;rsquo;t contain key, a KeyError exception is raised.</description></item><item><title>fetch/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/fetch/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/fetch/2/</guid><description>Finds the element at the given index (zero-based) and returns {:ok, element} if found.
A negative index can be passed, which means the index is counted from the end.
Returns :error if the given index is outside the range of the enumerable.</description></item><item><title>fetch/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/fetch/2/</guid><description>Fetches the value for a specific key and returns it in a tuple.
If the key does not exist, returns :error.</description></item><item><title>fetch/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/fetch/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/fetch/2/</guid><description>Fetches the value for a specific key in the given map by returning {:ok, value}.
If map doesn&amp;rsquo;t contain key, :error is returned.</description></item><item><title>filter/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/filter/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/filter/2/</guid><description>Returns only those elements for which fun returns a truthy value.</description></item><item><title>filter/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/filter/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/filter/2/</guid><description>Returns only those elements for which fun returns a truthy value.</description></item><item><title>filter/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/filter/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/filter/2/</guid><description>Creates a stream that filters elements according to the given function on enumeration.</description></item><item><title>find_index/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/find_index/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/find_index/2/</guid><description>Returns the index (zero-based) of the first element for which fun returns a truthy value.
If no such element is found it returns nil.</description></item><item><title>find_value/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/find_value/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/find_value/3/</guid><description>Returns the value of the first invocation of the function fun which returns a truthy value.
If no such element is found it returns default.</description></item><item><title>find/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/find/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/find/3/</guid><description>Returns the first element for which fun returns a truthy value.
If no such element is found it returns default.</description></item><item><title>first/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/first/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/first/2/</guid><description>Returns the first element in list.
Returns default if list is empty.</description></item><item><title>flat_map_reduce/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/flat_map_reduce/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/flat_map_reduce/3/</guid><description>Maps and reduces an enumerable, flattening the given results (only one level deep).
It expects an accumulator acc and a function fun that receives each enumerable element, and must return a tuple containing a new enumerable (often a list) with the new accumulator.
The map-reducing may end before processing all the enumerable if the fun function returns a tuple with :halt as first element and the accumulator as second.</description></item><item><title>flat_map/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/flat_map/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/flat_map/2/</guid><description>Maps the given fun over enumerable and flattens the result.</description></item><item><title>flat_map/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/flat_map/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/flat_map/2/</guid><description>Maps the given fun over enumerable and flattens the result.
This function returns a new stream built by appending the result of invoking fun on each element of enumerable together.</description></item><item><title>flatten/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/flatten/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/flatten/1/</guid><description>Flattens the given list of nested lists.
Empty list elements are discarded.</description></item><item><title>flatten/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/flatten/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/flatten/2/</guid><description>List.flatten/2 Flattens the given list of nested lists. The list tail will be added at the end of the flattened list.
Empty list elements from list are discarded, but not the ones from tail.</description></item><item><title>foldl/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/foldl/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/foldl/3/</guid><description>Folds (reduces) the given list from the left with a function. Requires an accumulator.</description></item><item><title>foldr/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/foldr/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/foldr/3/</guid><description>Folds (reduces) the given list from the right with a function. Requires an accumulator.</description></item><item><title>frequencies_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/frequencies_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/frequencies_by/2/</guid><description>Returns a map with keys as unique elements given by fun and values as the count of every element.</description></item><item><title>frequencies/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/frequencies/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/frequencies/1/</guid><description>Returns a map with keys as unique elements of enumerable and values as the count of every element.</description></item><item><title>from_keys/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/from_keys/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/from_keys/2/</guid><description>Builds a keyword list using keys as keys and value as fixed value.</description></item><item><title>get_and_update!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update_/3/</guid><description>Gets the value from key and updates it, all in one pass.
fun is called with the current value under key in map and must return a two-element tuple: the &amp;ldquo;get&amp;rdquo; value (the retrieved value, which can be operated on before being returned) and the new value to be stored under key in the resulting new map.
The returned value is a tuple with the &amp;ldquo;get&amp;rdquo; value returned by fun and a new map with the updated value under key.</description></item><item><title>get_and_update/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get_and_update/3/</guid><description>Gets the value from key and updates it, all in one pass.
fun is called with the current value under key in map and must return a two-element tuple: the &amp;ldquo;get&amp;rdquo; value (the retrieved value, which can be operated on before being returned) and the new value to be stored under key in the resulting new map.
The returned value is a tuple with the &amp;ldquo;get&amp;rdquo; value returned by fun and a new map with the updated value under key.</description></item><item><title>get_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_lazy/3/</guid><description>Gets the value for a specific key.
If duplicated entries exist, the first one is returned.
If key does not exist, lazily evaluates fun and returns its result.
This is useful if the default value is very expensive to calculate or generally difficult to setup and teardown again.</description></item><item><title>get_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get_lazy/3/</guid><description>Gets the value for a specific key in map.
If key is present in map with value value, then value is returned.
Otherwise, fun is evaluated and its result is returned. This is useful if the default value is very expensive to calculate or generally difficult to setup and teardown again.</description></item><item><title>get_values/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_values/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/get_values/2/</guid><description>Gets all values for a specific key.</description></item><item><title>get/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/get/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/get/3/</guid><description>Gets the value for a specific key.
If duplicated entries exist, the first one is returned.
If key does not exist, return the default value (nil if no default value).</description></item><item><title>get/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/get/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/get/3/</guid><description>Gets the value for a specific key in map.
Otherwise, default is returned.</description></item><item><title>group_by/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/group_by/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/group_by/3/</guid><description>Splits the enumerable into groups based on key_fun.
The result is a map where each key is given by key_fun and each value is a list of elements given by value_fun. The order of elements within each list is preserved from the enumerable. However, like all maps, the resulting map is unordered.</description></item><item><title>has_key?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/has_key_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/has_key_/2/</guid><description>Returns true if a given key exists in the given keywords.
If key does not exist, returns false.</description></item><item><title>has_key?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/has_key?/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/has_key?/2/</guid><description>Returns true if the given key exists in the given map.
Otherwise, returns false.</description></item><item><title>insert_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/insert_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/insert_at/3/</guid><description>Returns a list with value inserted at the specified index. Note that index is capped at the list length.
Negative indices indicate an offset from the end of the list.</description></item><item><title>insert_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Tuple/insert_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Tuple/insert_at/3/</guid><description>Inserts an element into a tuple.
Inserts value into tuple at the given index. Raises an ArgumentError if index is negative or greater than the length of tuple. Index is zero-based.</description></item><item><title>intersperse/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/intersperse/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/intersperse/2/</guid><description>Intersperses elem between each element of enumerable.</description></item><item><title>intersperse/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/intersperse/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/intersperse/2/</guid><description>Lazily intersperses elem between each element of the stream.</description></item><item><title>interval/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/interval/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/interval/1/</guid><description>Creates a stream that emits a value after the given period n in milliseconds.
The values emitted are an increasing counter starting at 0. This operation will block the caller by the given interval every time a new element is streamed.</description></item><item><title>iterate/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/iterate/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/iterate/2/</guid><description>Emits a sequence of values, starting with start. Successive values are generated by calling fun on the previous value.</description></item><item><title>join/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/join/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/join/2/</guid><description>Joins the given enumerable into a binary using joiner as a separator.
If joiner is not passed at all, it defaults to the empty binary.
All elements in the enumerable must be convertible to a binary, otherwise an error is raised.</description></item><item><title>keydelete/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keydelete/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keydelete/3/</guid><description>Receives a list of tuples and deletes the first tuple where the index-th element is the given key.</description></item><item><title>keyfind/4</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keyfind/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keyfind/4/</guid><description>Receives a list of tuples and returns the first tuple where the index-th element is the given key.
If no matching tuple is found, default is returned.</description></item><item><title>keymember?/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keymember_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keymember_/3/</guid><description>Receives a list of tuples and returns true if there is a tuple where the index-th element is the given key.
Otherwise it returns false.</description></item><item><title>keyreplace/4</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keyreplace/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keyreplace/4/</guid><description>Receives a list of tuples and replaces the tuple whose index-th element is key with new_tuple.
If no tuple is found the list is returned untouched.</description></item><item><title>keys/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/keys/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/keys/1/</guid><description>Returns all keys from the keyword list.</description></item><item><title>keys/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/keys/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/keys/1/</guid><description>Returns all keys from map.</description></item><item><title>keystore/4</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keystore/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keystore/4/</guid><description>Receives a list of tuples and replaces the element identified by key at position with new_tuple.
If the element does not exist, it is added to the end of the list.</description></item><item><title>keytake/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/keytake/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/keytake/3/</guid><description>Receives a list of tuples and returns the first tuple where the element at position in the tuple matches the given key, as well as the list without found tuple.
If such a tuple is not found, nil will be returned.</description></item><item><title>keyword?/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/keyword_/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/keyword_/1/</guid><description>Returns true if term is a keyword list; otherwise returns false.</description></item><item><title>last/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/last/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/last/2/</guid><description>Returns the last element in list.
Returns default if list is empty.</description></item><item><title>map_every/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/map_every/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/map_every/3/</guid><description>Returns a list of results of invoking fun on every nth element of enumerable, starting with the first element.
The first element is always passed to the given function, unless nth is 0.
The second argument specifying every nth element must be a non-negative integer.
If nth is 0, then enumerable is directly converted to a list, without fun being ever applied.</description></item><item><title>map_every/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/map_every/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/map_every/3/</guid><description>Creates a stream that will apply the given function on every nth element from the enumerable.
The first element is always passed to the given function.
nth must be a non-negative integer.</description></item><item><title>map_intersperse/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/map_intersperse/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/map_intersperse/3/</guid><description>Maps with the function fun and intersperses the given enumerable in one pass.</description></item><item><title>map_join/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/map_join/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/map_join/3/</guid><description>Maps and joins the given enumerable in one pass.
joiner can be either a binary or a list and the result will be of the same type as joiner. If joiner is not passed at all, it defaults to an empty binary.
All elements returned from invoking the fun must be convertible to a binary, otherwise an error is raised.</description></item><item><title>map_reduce/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/map_reduce/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/map_reduce/3/</guid><description>Invokes the given function to each element in the enumerable to reduce it to a single element, while keeping an accumulator.
Returns a tuple where the first element is the mapped enumerable and the second one is the final accumulator.
The function, fun, receives two arguments: the first one is the element, and the second one is the accumulator. fun must return a tuple with two elements in the form of {result, accumulator}.</description></item><item><title>map/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/map/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/map/2/</guid><description>Returns a list where each element is the result of invoking fun on each corresponding element of enumerable.</description></item><item><title>map/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/map/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/map/2/</guid><description>Creates a stream that will apply the given function on enumeration.</description></item><item><title>max_by/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/max_by/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/max_by/4/</guid><description>Returns the maximal element in the enumerable as calculated by the given fun.
By default, the comparison is done with the &amp;gt;= sort function. If multiple elements are considered maximal, the first one that was found is returned.
If the enumerable is empty, the provided empty_fallback is called.
The default empty_fallback raises Enum.EmptyError.</description></item><item><title>max/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/max/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/max/3/</guid><description>Returns the maximal element in the enumerable according to Erlang&amp;rsquo;s term ordering.
By default, the comparison is done with the &amp;gt;= sort function. If multiple elements are considered maximal, the first one that was found is returned.
If the enumerable is empty, the provided empty_fallback is called.
The default empty_fallback raises Enum.EmptyError.</description></item><item><title>member?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/member/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/member/2/</guid><description>Returns true if any element in the enumerable is equal (in terms of ===/3) to elem.
If no element is found then false is returned.</description></item><item><title>merge/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/merge/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/merge/2/</guid><description>Merges two maps into one.
All keys in map2 will be added to map1, overriding any existing one (i.e., the keys in map2 &amp;ldquo;have precedence&amp;rdquo; over the ones in map1).</description></item><item><title>merge/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/merge/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/merge/3/</guid><description>Merges two maps into one, resolving conflicts through the given fun.
All keys in map2 will be added to map1. The given function will be invoked when there are duplicate keys; its arguments are key (the duplicate key), value1 (the value of key in map1), and value2 (the value of key in map2).
The value returned by fun is used as the value under key in the resulting map.</description></item><item><title>min_by/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/min_by/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/min_by/4/</guid><description>Returns the minimal element in the enumerable as calculated by the given fun.
By default, the comparison is done with the &amp;lt;= sort function. If multiple elements are considered minimal, the first one that was found is returned.
If the enumerable is empty, the provided empty_fallback is called.
The default empty_fallback raises Enum.EmptyError.</description></item><item><title>min_max_by/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/min_max_by/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/min_max_by/3/</guid><description>Returns a tuple with the minimal and the maximal elements in the enumerable as calculated by the given function. If multiple elements are considered maximal or minimal, the first one that was found is returned.
If the enumerable is empty, the provided empty_fallback is called.
The default empty_fallback raises Enum.EmptyError.</description></item><item><title>min_max/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/min_max/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/min_max/2/</guid><description>Returns a tuple with the minimal and the maximal elements in the enumerable according to Erlang&amp;rsquo;s term ordering. If multiple elements are considered maximal or minimal, the first one that was found is returned.
If the enumerable is empty, the provided empty_fallback is called.
The default empty_fallback raises Enum.EmptyError.</description></item><item><title>min/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/min/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/min/3/</guid><description>Returns the minimal element in the enumerable according to Erlang&amp;rsquo;s term ordering.
By default, the comparison is done with the &amp;lt;= sort function. If multiple elements are considered minimal, the first one that was found is returned.
If the enumerable is empty, the provided empty_fallback is called.
The default empty_fallback raises Enum.EmptyError.</description></item><item><title>new/0</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/0/</guid><description>Returns an empty keyword list, i.e. an empty list.</description></item><item><title>new/0</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/new/0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/new/0/</guid><description>Returns a new empty map.</description></item><item><title>new/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/1/</guid><description>Creates a keyword list from an enumerable. Duplicated entries are removed, the latest one prevails.</description></item><item><title>new/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/new/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/new/1/</guid><description>Creates a map from an enumerable.
Duplicated keys are removed; the latest one prevails.</description></item><item><title>new/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/new/2/</guid><description>Creates a keyword list from an enumerable via the transformation function fun. Duplicated entries are removed, the latest one prevails.</description></item><item><title>new/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/new/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/new/2/</guid><description>Creates a map from an enumerable via the given transformation function fun.
Duplicated keys are removed; the latest one prevails.</description></item><item><title>new/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Range/new/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Range/new/2/</guid><description>Creates a range that go from first to last.</description></item><item><title>new/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Range/new/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Range/new/3/</guid><description>Creates a range that go from first to last, using step as incrementing/decrementing value.</description></item><item><title>pop_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/pop_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/pop_at/3/</guid><description>Returns and removes the value at the specified index in the list.
Negative indices indicate an offset from the end of the list.
If index is out of bounds, the original list is returned.</description></item><item><title>pop_first/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_first/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_first/3/</guid><description>Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, {default, keywords} is returned.</description></item><item><title>pop_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_lazy/3/</guid><description>Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, the value from the function fun is returned in {value, keywords}.</description></item><item><title>pop_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/pop_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/pop_lazy/3/</guid><description>Lazily returns and removes the value associated with key in map.
If key is present in map with value value, {value, new_map} is returned where new_map is the result of removing key from map.
If key is not present in map, {b, map} is returned, where b is the result of applying fun.</description></item><item><title>pop_values/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_values/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_values/2/</guid><description>Returns all values for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is a list of values for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, {[], keyword_list} is returned.</description></item><item><title>pop!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop_/2/</guid><description>Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, KeyError is raised.</description></item><item><title>pop!/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/pop_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/pop_/2/</guid><description>Returns and removes the value associated with key in map.
Raises KeyError if key is not present.</description></item><item><title>pop/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/pop/3/</guid><description>Returns the first value for key and removes all associated entries in the keyword list.
It returns a tuple where the first element is the first value for key and the second element is a keyword list with all entries associated with key removed.
If the key is not present in the keyword list, {default, keywords} is returned.</description></item><item><title>pop/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/pop/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/pop/3/</guid><description>Returns and removes the value associated with key in map.
If key is present in map with value value, {value, new_map} is returned where new_map is the result of removing key from map.
If key is not present in map, {default, map} is returned.</description></item><item><title>put_elem/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Kernel/put_elem/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Kernel/put_elem/3/</guid><description>Puts value at the given zero-based index in tuple.</description></item><item><title>put_new_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new_lazy/3/</guid><description>Evaluates fun and puts the result under key in keywords unless key is already present.
This function is useful in case you want to compute the value to put under key only if key is not already present, as for example, when the value is expensive to calculate or generally difficult to setup and teardown again.
If keywords doesn’t contain key then it’s added using the value returned from fun.</description></item><item><title>put_new_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/put_new_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/put_new_lazy/3/</guid><description>Evaluates fun and puts the result under key in map unless key is already present.
This function is useful in case you want to compute the value to put under key only if key is not already present, as for example, when the value is expensive to calculate or generally difficult to setup and teardown again.
If map doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using the value returned from fun.</description></item><item><title>put_new/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/put_new/3/</guid><description>Puts the given value under key unless the entry key already exists.
If keywords doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using value as value.</description></item><item><title>put_new/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/put_new/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/put_new/3/</guid><description>Puts the given value under key unless the entry key already exists.
If map doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using value as value.</description></item><item><title>put/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/put/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/put/3/</guid><description>Puts the given value under key. If a previous value is already stored, all entries are removed and the value is overridden.</description></item><item><title>put/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/put/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/put/3/</guid><description>Puts the given value under key in map.
If map doesn&amp;rsquo;t contain key then it&amp;rsquo;s added using value as value.</description></item><item><title>random/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/random/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/random/1/</guid><description>Returns a random element from enumerable.
This function uses Erlang&amp;rsquo;s :rand module to calculate the random value. Check its documentation for setting a different random algorithm or a different seed.
The implementation is based on the reservoir sampling algorithm. It assumes that the sample being returned can fit into memory; the input enumerable doesn&amp;rsquo;t have to, as it is traversed just once.
If a range is passed into the function, this function will pick a random value between the range limits, without traversing the whole range (thus executing in constant time and constant memory).</description></item><item><title>reduce_while/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reduce_while/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reduce_while/3/</guid><description>Reduces enumerable until it&amp;rsquo;s exhausted or fun returns {:halt, term}.
The return value for fun is expected to be
{:cont, acc} to continue the reduction with acc as the new accumulator or {:halt, acc} to halt the reduction If fun returns {:halt, acc} the reduction is halted and the function returns acc.
Otherwise, if enumerable is exhausted, the function returns the accumulator of the last {:cont, acc}.</description></item><item><title>reduce/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reduce/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reduce/2/</guid><description>Invokes fun for each element in the enumerable with the accumulator.
The first element of the enumerable is used as the initial value of the accumulator. Then the function is invoked with the next element and the accumulator. The result returned by the function is used as the accumulator for the next iteration, recursively. When the enumerable is done, the last accumulator is returned.
Since the first element of the enumerable is used as the initial value of the accumulator, fun will only be executed n - 1 times where n is the length of the enumerable.</description></item><item><title>reduce/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reduce/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reduce/3/</guid><description>Invokes fun for each element in the enumerable with the accumulator.
The initial value of the accumulator is acc. The function is invoked for each element in the enumerable with the accumulator. The result returned by the function is used as the accumulator for the next iteration. The function returns the last accumulator.
It returns acc if enumerable is empty.</description></item><item><title>reject/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reject/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reject/2/</guid><description>Returns only those elements for which fun does not return a truthy value.</description></item><item><title>reject/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/reject/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/reject/2/</guid><description>Returns only those elements for which fun does not return a truthy value.</description></item><item><title>reject/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/reject/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/reject/2/</guid><description>Creates a stream that will reject elements according to the given function on enumeration.</description></item><item><title>repeatedly/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/repeatedly/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/repeatedly/1/</guid><description>Returns a stream generated by calling fun repeatedly.</description></item><item><title>replace_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/replace_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/replace_at/3/</guid><description>Returns a list with a replaced value at the specified index.
Negative indices indicate an offset from the end of the list.
If index is out of bounds, the original list is returned.</description></item><item><title>replace_lazy/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace_lazy/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace_lazy/3/</guid><description>Replaces the value under key using the given function only if the key already exists in keywords.
In case the key exists multiple times in the keyword list, it removes later occurrences.
If key is not present keywords is returned as it.</description></item><item><title>replace!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace_/3/</guid><description>Puts value under key only if the key already exists in keywords.
In case the key exists multiple times in the keyword list, it removes later occurrences.
If key is not present in keywords, a KeyError exception is raised.</description></item><item><title>replace!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/replace_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/replace_/3/</guid><description>Alters the value stored under key to value, but only if the entry key already exists in map.
If key is not present in map, a KeyError exception is raised.</description></item><item><title>replace/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/replace/3/</guid><description>Puts value under key only if the key already exists in keywords.
In case the key exists multiple times in the keyword list, it removes later occurrences.
If key is not present keywords is returned as it.</description></item><item><title>reverse_slice/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reverse_slice/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reverse_slice/3/</guid><description>Reverses the enumerable in the range from initial start through count elements.</description></item><item><title>reverse/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reverse/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reverse/1/</guid><description>Returns the elements from enumerable in reverse order.</description></item><item><title>reverse/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/reverse/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/reverse/2/</guid><description>Returns the elements from enumerable in reverse order and then appends tail to it.</description></item><item><title>scan/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/scan/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/scan/2/</guid><description>Applies the function fun to each element in the enumerable, storing the result in a list and passing it as the accumulator for the next computation. Uses the first element in the enumerable as the starting value.</description></item><item><title>scan/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/2/</guid><description>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the first element in the enumerable as the starting value.</description></item><item><title>scan/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/scan/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/scan/3/</guid><description>Applies the function fun to each element in the enumerable, storing the result in a list and passing it as the accumulator for the next computation. Uses the given acc as the starting value.</description></item><item><title>scan/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/scan/3/</guid><description>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the given acc as the starting value.</description></item><item><title>shuffle/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/shuffle/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/shuffle/1/</guid><description>Returns the elements enumerable shuffled.
This function uses Erlang&amp;rsquo;s :rand module to calculate the random value. Check its documentation for setting a different random algorithm or a different seed.</description></item><item><title>slice/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/slice/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/slice/2/</guid><description>Returns a subset list of the given enumerable by range.
range must be a Range. Given an enumerable, it drops elements before range.first (zero-base), then takes elements until element range.last (inclusively).
If range.last is out of bounds, then it is assigned as the index of the last element.
Indexes are normalized, meaning that negative indexes will be counted from the end.
If the normalized range.first is out of bounds of the given enumerable, or this one is greater than the normalized range.</description></item><item><title>slice/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/slice/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/slice/3/</guid><description>Returns a subset list of the given enumerable, from start (zero-based) with count number of elements if available.
A negative start can be passed, which means the enumerable is enumerated once and the index is counted from the end.
It returns [] if count is 0 or if start is out of bounds.</description></item><item><title>sort_by/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/sort_by/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/sort_by/3/</guid><description>Sorts the enumerable by mapping each element using the provided mapper function and then sorting the mapped elements using the sorter function, which defaults to Kernel.&amp;lt;=/2.</description></item><item><title>sort/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/sort/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/sort/1/</guid><description>Sorts the enumerable according to Erlang&amp;rsquo;s term ordering.</description></item><item><title>sort/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/sort/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/sort/2/</guid><description>Sorts the enumerable. The given function fun should compare two arguments, and return true if the first argument precedes or is in the same place as the second one.</description></item><item><title>split_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/split_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/split_while/2/</guid><description>Splits enumerable in two at the position of the element for which fun returns a falsy value (false or nil) for the first time.</description></item><item><title>split_with/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/split_with/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/split_with/2/</guid><description>Splits the enumerable in two lists by calling fun with each element in the enumerable as its only argument. Returns a tuple with the first list containing all the elements in enumerable for which applying fun returned a truthy value, and a second list with all the elements for which applying fun returned a falsy value (false or nil).
The elements in both the returned lists are in the same relative order as they were in the original enumerable (if such enumerable was ordered, like a list).</description></item><item><title>split/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/split/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/split/2/</guid><description>Splits the enumerable into two enumerables, leaving count elements in the first one.
If count is a negative number, it starts counting from the back to the beginning of the enumerable.</description></item><item><title>split/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/split/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/split/2/</guid><description>Takes all entries corresponding to the given keys in keywords and extracts them into a separate keyword list.
Returns a tuple with the new list and the old list with removed keys.
Keys for which there are no entries in the keyword list are ignored.
Entries with duplicated keys end up in the same keyword list.</description></item><item><title>split/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/split/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/split/2/</guid><description>Takes all entries corresponding to the given keys in map and extracts them into a separate map.
Returns a tuple with the new map and the old map with removed keys.
Keys for which there are no entries in map are ignored.</description></item><item><title>starts_with?/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/starts_with_/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/starts_with_/2/</guid><description>Returns true if list starts with the given prefix. Also if prefix is an empty list, it returns true.
Otherwise returns false.</description></item><item><title>sum/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/sum/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/sum/1/</guid><description>Returns the sum of all elements of enumerable.
Raises ArithmeticError if enumerable contains a non-numeric value.</description></item><item><title>take_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/take_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/take_every/2/</guid><description>Returns a list of every nth element in the enumerable, starting with the first element.
The first element is always included, unless nth is 0.
The second argument specifying every nth element must be a non-negative integer.</description></item><item><title>take_every/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/take_every/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/take_every/2/</guid><description>Creates a stream that takes every nth elements from the enumerable.
The first element is always included, unless nth is 0.
nth must be a non-negative integer.</description></item><item><title>take_random/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/take_random/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/take_random/2/</guid><description>Takes at most count random elements from enumerable.</description></item><item><title>take_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/take_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/take_while/2/</guid><description>Takes the elements from the beginning of the enumerable while fun returns a truthy value.</description></item><item><title>take_while/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/take_while/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/take_while/2/</guid><description>Lazily takes elements of the enumerable while the given function returns a truthy value.</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/take/2/</guid><description>Takes count elements from the beginning of enumerable.
If a negative count is given, the elements will be taken from the end.
If count is 0, it returns [].</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/take/2/</guid><description>Takes all entries corresponding to the given keys and returns them in a new keyword list.
Duplicated keys are preserved in the new keyword list.</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/take/2/</guid><description>Returns a new map with all the key-value pairs in map where the key is in keys.
If keys contains keys that are not in map, they&amp;rsquo;re simply ignored.</description></item><item><title>take/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/take/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/take/2/</guid><description>Lazily takes the next count elements from stream and stops enumeration.
If a negative count is given, the last count values will be taken.</description></item><item><title>timer/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/timer/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/timer/1/</guid><description>Creates a stream that emits a single value after n milliseconds.
The value emitted is 0. This operation will block the caller by the given time until the element is streamed.</description></item><item><title>to_charlist/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Atom/to_charlist/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Atom/to_charlist/1/</guid><description>Converts an atom to a charlist.</description></item><item><title>to_integer/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/1/</guid><description>Returns an integer whose text representation is charlist.</description></item><item><title>to_integer/2</title><link>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/to_integer/2/</guid><description>Returns an integer whose text representation is charlist in base base.
The base needs to be between 2 and 36.</description></item><item><title>to_list/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/to_list/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/to_list/1/</guid><description>Returns the keyword list itself.</description></item><item><title>to_list/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/to_list/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/to_list/1/</guid><description>Converts map to a list.
Each key-value pair in the map is converted to a two-element tuple {key, value} in the resulting list.</description></item><item><title>to_list/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Range/to_list/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Range/to_list/1/</guid><description>Converts a range to a list.</description></item><item><title>to_list/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Tuple/to_list/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Tuple/to_list/1/</guid><description>Converts a tuple to a list.</description></item><item><title>to_string/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Atom/to_string/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Atom/to_string/1/</guid><description>Converts an atom to a string.</description></item><item><title>to_string/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Integer/to_string/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Integer/to_string/2/</guid><description>Returns a binary which corresponds to the text representation of integer.
If base is provided then integer is converted given that base.</description></item><item><title>to_tuple/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/to_tuple/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/to_tuple/1/</guid><description>Converts a list to a tuple.</description></item><item><title>transform/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/3/</guid><description>Transforms an existing stream.
It expects an accumulator and a function that receives each stream element and an accumulator. It must return a tuple, where the first element is a new stream (often a list) or the atom :halt, and the second element is the accumulator to be used by the next element, if any, in both cases.</description></item><item><title>transform/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/transform/4/</guid><description>Transforms an existing stream with function-based start and finish.
The accumulator is only calculated when transformation starts. It also allows an after function to be given which is invoked when the stream halts or completes.</description></item><item><title>undigits/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Integer/undigits/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Integer/undigits/2/</guid><description>Returns the integer represented by the ordered digits.
An optional base value may be provided representing the radix for the digits. base has to be an integer greater than or equal to 2.</description></item><item><title>unfold/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/unfold/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/unfold/2/</guid><description>Emits a sequence of values for the given accumulator acc.
Successive values are generated by calling fun with the previous accumulator and it must return a tuple with the current value and next accumulator.
The enumeration finishes when fun returns nil.</description></item><item><title>uniq_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/uniq_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/uniq_by/2/</guid><description>Enumerates the enumerable by removing the elements for which function fun returned duplicate elements.
The function fun maps every element to a term. Two elements are considered duplicates if the return value of fun is equal for both of them.
The first occurrence of each element is kept.</description></item><item><title>uniq_by/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq_by/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq_by/2/</guid><description>Creates a stream that only emits elements if they are unique, by removing the elements for which function fun returned duplicate elements.
The function fun maps every element to a term which is used to determine if two elements are duplicates.
Keep in mind that, in order to know if an element is unique or not, this function needs to store all unique values emitted by the stream. Therefore, if the stream is infinite, the number of elements stored will grow infinitely, never being garbage-collected.</description></item><item><title>uniq/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/uniq/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/uniq/1/</guid><description>Removes all duplicated elements.</description></item><item><title>uniq/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/uniq/1/</guid><description>Creates a stream that only emits elements if they are unique.
Keep in mind that, in order to know if an element is unique or not, this function needs to store all unique values emitted by the stream. Therefore, if the stream is infinite, the number of elements stored will grow infinitely, never being garbage-collected.</description></item><item><title>unzip/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/unzip/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/unzip/1/</guid><description>It takes an enumerable with elements being two-element tuples and returns a tuple with two lists, each of which is formed by the first and second element of each tuple, respectively.
This function fails unless enumerable is or can be converted into a list of tuples with exactly two elements in each tuple.</description></item><item><title>update_at/3</title><link>https://superruzafa.github.io/visual-elixir-reference/List/update_at/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/update_at/3/</guid><description>Returns a list where its index-th element is updated according ta function fun.
If index is out of bounds, the original list is returned.
Negative indices indicate an offset from the end of the list.</description></item><item><title>update!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/update_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/update_/3/</guid><description>Updates the key with the given function fun. If there are duplicated keys, they are all removed and only the first one is updated.
If the key does not exist, raises KeyError.</description></item><item><title>update!/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/update_/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/update_/3/</guid><description>Updates the key in map with the given function fun.
If key is present in map with value value, fun is invoked with argument value and its result is used as the new value of key.
If key is not present in map, a KeyError exception is raised.</description></item><item><title>update/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/update/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/update/4/</guid><description>Updates the key in keywords with the given function. If there are duplicated keys, they are all removed and only the first one is updated.
If the key does not exist, inserts value under key.</description></item><item><title>update/4</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/update/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/update/4/</guid><description>Updates the key in map with the given function fun.
If key is present in map with value value, fun is invoked with argument value and its result is used as the new value of key.
If key is not present in map, value is inserted as the value of key. The initial value will not be passed through the update function.</description></item><item><title>values/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Keyword/values/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Keyword/values/1/</guid><description>Returns all values from the keyword list.
Values from duplicated keys will be kept in the final list of values.</description></item><item><title>values/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Map/values/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Map/values/1/</guid><description>Returns all values from map.</description></item><item><title>with_index/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/with_index/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/with_index/2/</guid><description>Returns the enumerable with each element wrapped in a tuple alongside its index.
If an offset is given, we will index from the given offset instead of from zero.</description></item><item><title>with_index/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/with_index/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/with_index/2/</guid><description>Creates a stream where each element in the enumerable will be wrapped in a tuple alongside its index.
If offset is given, we will index from the given offset instead of from zero.</description></item><item><title>wrap/1</title><link>https://superruzafa.github.io/visual-elixir-reference/List/wrap/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/List/wrap/1/</guid><description>Wraps term in a list if this is not list.
If term is already a list, it returns the list.
If term is nil, it returns an empty list.</description></item><item><title>zip_with/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/zip_with/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/zip_with/2/</guid><description>Zips corresponding elements from multiple enumerables into a list, using zip_fun as transforming function.
The zipping finishes as soon as any enumerable completes.</description></item><item><title>zip_with/3</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/zip_with/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/zip_with/3/</guid><description>Zips corresponding elements from two enumerables, enumerable1 and enumerable2 into one list using zip_fun as transforming function.
The zipping finishes as soon as any enumerable completes.</description></item><item><title>zip/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/zip/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/zip/1/</guid><description>Zips corresponding elements from a finite collection of enumerables into one list of tuples.
The zipping finishes as soon as any enumerable in the given collection completes.</description></item><item><title>zip/1</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/1/</guid><description>Zips corresponding elements from a finite collection of enumerables into one stream of tuples.
The zipping finishes as soon as any enumerable in the given collection completes.</description></item><item><title>zip/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Enum/zip/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Enum/zip/2/</guid><description>Zips corresponding elements from two enumerables, enumerable1 and enumerable2 into one list of tuples.
The zipping finishes as soon as any enumerable completes.</description></item><item><title>zip/2</title><link>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://superruzafa.github.io/visual-elixir-reference/Stream/zip/2/</guid><description>Zips two collections together, lazily.
The zipping finishes as soon as any enumerable completes.</description></item></channel></rss>